"use strict";(self.webpackChunk_graphistry_client_api_react=self.webpackChunk_graphistry_client_api_react||[]).push([[189],{"./src/stories/GraphistryJS.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{HideChrome:()=>HideChrome,InstantiateGraphistryJS:()=>InstantiateGraphistryJS,PredefinedDataset:()=>PredefinedDataset,ResetFilters:()=>ResetFilters,SetSettings:()=>SetSettings,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__,radialLayoutAndAxis:()=>radialLayoutAndAxis,setFilters:()=>setFilters,tick:()=>tick,togglePanelFilters:()=>togglePanelFilters,verticalLayoutAndAxis:()=>verticalLayoutAndAxis});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),rxjs__WEBPACK_IMPORTED_MODULE_4__=(__webpack_require__("./assets/index.css"),__webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js")),_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../client-api/dist/index.full.esm.min.js"),rxjs__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/interval.js"),rxjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const hostname=window.location.hostname,basePath="github.com"===hostname||"graphistry.github.io"===hostname?"https://hub.graphistry.com":"".concat(window.location.protocol,"//").concat(window.location.hostname),lesMisPath="".concat(basePath,"/graph/graph.html?dataset=Miserables"),lesMisConfigured="".concat(lesMisPath,"&play=0"),lesMisNoPlayNoSplash="".concat(lesMisPath,"&play=0&splashAfter=false");function GraphistryIFrame(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{src:lesMisConfigured,...args})}GraphistryIFrame.displayName="GraphistryIFrame";const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:"import React, { useRef, useState, useEffect } from 'react';\nimport '../../assets/index.css';\nimport { combineLatest } from 'rxjs';\n\nimport {\n  //graphistry\n  graphistryJS,\n  updateSetting,\n  addFilters,\n  addExclusions,\n  resetFilters,\n  resetExclusions,\n  togglePanel,\n  toggleToolbar,\n  toggleHistograms,\n  toggleTimebars,\n  toggleInspector,\n  encodeAxis,\n  selectionUpdates,\n  tickClustering,\n\n  //rxjs\n  delay,\n  filter,\n  map,\n  of,\n  scan,\n  switchMap,\n  tap,\n  // Observable\n} from '@graphistry/client-api';\nimport { interval, takeWhile } from 'rxjs';\n\n\n\nconst hostname = window.location.hostname;\nconst useHub = hostname === \"github.com\" || hostname === \"graphistry.github.io\";\nconst basePath = useHub ? 'https://hub.graphistry.com' : `${window.location.protocol}//${window.location.hostname}`;\n\n//const basePath = 'http://localhost';\nconst lesMisPath = `${basePath}/graph/graph.html?dataset=Miserables`;\nconst lesMisConfigured = `${lesMisPath}&play=0`;\nconst lesMisNoPlayNoSplash = `${lesMisPath}&play=0&splashAfter=false`;\n\nfunction GraphistryIFrame(args) {\n  return <iframe src={lesMisConfigured} {...args} />;\n}\n\nexport default {\n  title: 'Graphistry: Vanilla JS',\n  component: GraphistryIFrame,\n};\n\nconst defaultIframeProps = {\n  style: {\n    width: '100%',\n    height: '100%',\n    minHeight: '500px',\n    border: 'none',\n  },\n  allowFullScreen: true,\n};\n\nexport const PredefinedDataset = {\n  render: (args) => <iframe src={lesMisConfigured} {...args} />,\n};\n\nexport const InstantiateGraphistryJS = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = graphistryJS(iframe.current).subscribe(\n        (g) =>\n          setMessages((arr) =>\n            arr.concat([`graphistryJS instantiated: ${Object.keys(g).join(', ')}`])\n          ),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed']))\n      );\n      ////////\n      return () => sub.unsubscribe();\n    }, [iframe]);\n\n    return (\n      <div>\n        <h3>Instantiate GraphistryJS session for iframe</h3>\n        <ol>\n          {messages.map((m, i) => (\n            <li key={i}>{m}</li>\n          ))}\n        </ol>\n        <iframe\n          {...defaultIframeProps}\n          ref={iframe}\n          src={`${lesMisPath}&play=0&splashAfter=false`}\n          {...args}\n        />\n      </div>\n    );\n  },\n};\n\nconst SUBSCRIPTION_TEST = [\n  { a: true, b: false },\n  { a: true, b: true },\n  { a: false, b: true },\n  { a: true, b: true },\n  { a: true, b: false },\n  { a: false, b: false },\n  { a: true, b: false },\n  { a: false, b: false },\n  { a: true, b: true },\n];\n\nconst statusString = (a, b) => `${a ? 'A' : '..'} ${b ? 'B' : '..'}`;\n\n// TODO: Move this to a testing file.\nconst GraphistryJSSubscribeToSelection = (args) => {\n  const iframe = useRef(null);\n  const [messages, setMessages] = useState(['loading...']);\n  const pushMessage = (s) => setMessages((arr) => arr.concat([s]));\n  const [valA, setValA] = useState(null);\n  const [valB, setValB] = useState(null);\n\n  useEffect(() => {\n    if (!iframe.current) {\n      return;\n    }\n\n    combineLatest([graphistryJS(iframe.current), graphistryJS(iframe.current)])\n      .pipe(\n        filter(([gA, gB]) => gA && gB),\n        delay(1000), // Allow the viz iframe to initialize\n        switchMap(([gA, gB]) => interval(1500).pipe(map((idx) => ({ idx, gA, gB })))),\n        takeWhile(({ idx }) => idx < SUBSCRIPTION_TEST.length),\n        tap(({ idx }) => {\n          if (idx == 0) {\n            pushMessage('Starting test');\n            console.log('APISUB', 'Starting test');\n          }\n        }),\n        scan(\n          ({ A, B }, { gA, gB, idx }) => {\n            const { a, b } = SUBSCRIPTION_TEST[idx];\n            pushMessage(statusString(a, b));\n            console.log('APISUB', statusString(A, B), ' -> ', statusString(a, b));\n\n            if (a && !A) {\n              A = selectionUpdates(gA).subscribe({\n                next: (v) => {\n                  setValB(v);\n                  console.log('APISUB', 'Subscription A got selection', v);\n                },\n                error: (err) => console.error('APISUB', 'Subscription A got error', err),\n                complete: () => console.log('APISUB', 'Subscription A completed'),\n              });\n            }\n\n            if (!a && A) {\n              A.unsubscribe();\n              A = null;\n            }\n\n            if (b && !B) {\n              B = selectionUpdates(gB).subscribe({\n                next: (v) => {\n                  setValA(v);\n                  console.log('APISUB', 'Subscription B got selection', v);\n                },\n                error: (err) => console.error('APISUB', 'Subscription B got error', err),\n                complete: () => console.log('APISUB', 'Subscription B completed'),\n              });\n            }\n\n            if (!b && B) {\n              B.unsubscribe();\n              B = null;\n            }\n\n            return { A, B };\n          },\n          { A: null, B: null }\n        )\n      )\n      .subscribe({\n        error: (err) => pushMessage(`Error: ${err}`),\n        complete: () => pushMessage('Completed'),\n      });\n  }, [iframe]);\n\n  return (\n    <div>\n      <h3>Test subscribe and unsubscribe to selections.</h3>\n      <p>Click or shift drag to make selextions in the viz.</p>\n      <ul>\n        <li>A: {JSON.stringify(valA)}</li>\n        <li>B: {JSON.stringify(valB)}</li>\n      </ul>\n      <ol>\n        {messages.map((m, i) => (\n          <li key={i}>{m}</li>\n        ))}\n      </ol>\n      <iframe\n        {...defaultIframeProps}\n        ref={iframe}\n        src={`${lesMisPath}&play=0&splashAfter=false&session=cycle`}\n        {...args}\n      />\n    </div>\n  );\n};\nconsole.log('Not exporting', GraphistryJSSubscribeToSelection);\n\nexport const SetSettings = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = graphistryJS(iframe.current)\n        .pipe(\n          tap(() =>\n            setMessages((arr) => arr.concat([`graphistryJS instantiated; changing settings`]))\n          ),\n          updateSetting('background', '#ff0000'),\n          updateSetting('showToolbar', false),\n          tap(() => setMessages((arr) => arr.concat([`Delaying 3s and changing settings again`]))),\n          delay(3000),\n          updateSetting('background', '#00ff00'),\n          updateSetting('showToolbar', true),\n          tap(() => setMessages((arr) => arr.concat([`Delaying 3s and changing settings again`]))),\n          delay(3000),\n          updateSetting('background', '#ff0000'),\n          updateSetting('showToolbar', false)\n        )\n        .subscribe(\n          (v) => setMessages((arr) => arr.concat([`pipeline event: ${Object.keys(v).join(', ')}`])),\n          (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n          () => setMessages((arr) => arr.concat(['Completed']))\n        );\n      ////////\n      return () => sub.unsubscribe();\n    }, [iframe]);\n\n    return (\n      <div>\n        <h3>Set settings over time:</h3>\n        <ol>\n          {messages.map((m, i) => (\n            <li key={i}>{m}</li>\n          ))}\n        </ol>\n        <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      </div>\n    );\n  },\n};\n\nexport const setFilters = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            delay(3000),\n            tap(() => setMessages((arr) => arr.concat([`adding filters`]))),\n            addFilters(\n              args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']\n            ),\n            addExclusions(args.exclusions || ['edge:id = 1']),\n            togglePanel('filters', false)\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>\n  },\n};\n\nexport const ResetFilters = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            delay(3000),\n            tap(() => setMessages((arr) => arr.concat([`adding filters`]))),\n            addFilters(\n              args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']\n            ),\n            addExclusions(args.exclusions || ['edge:id = 1']),\n            togglePanel('filters', false),\n            tap(() => setMessages((arr) => arr.concat([`pausing before removing filters`]))),\n            delay(3000),\n            tap(() => setMessages((arr) => arr.concat([`removing filters`]))),\n            resetFilters(),\n            resetExclusions()\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>\n  },\n};\n\nexport const togglePanelFilters = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            delay(3000),\n            tap(() => setMessages((arr) => arr.concat([`toggling panel filters`]))),\n            togglePanel('filters', true)\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  },\n};\n\nexport const HideChrome = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            delay(3000),\n            tap(() => setMessages((arr) => arr.concat([`hiding chrome`]))),\n            toggleToolbar(false),\n            toggleHistograms(false),\n            toggleTimebars(false),\n            toggleInspector(false)\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  },\n};\n\nexport const radialLayoutAndAxis = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            tap(() => setMessages((arr) => arr.concat([`radial layout and axis`]))),\n            updateSetting('lockedR', true), // any position clustering preserves radius from the center\n            updateSetting('background', '#f0f0f0'),\n            encodeAxis([\n              { r: 40 },\n              { internal: true, label: 'my inner label', r: 80 },\n              { r: 120 },\n              { external: true, label: 'my outer label', r: 160 },\n              { r: 200 },\n              { r: 220 },\n            ])\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  },\n};\n\nexport const verticalLayoutAndAxis = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub =\n        (graphistryJS(iframe.current)\n          .pipe(\n            tap(() =>\n              setMessages((arr) => arr.concat([`graphistryJS instantiated; pausing 3s...`]))\n            ),\n            //delay(1000),\n            tap(() => setMessages((arr) => arr.concat([`radial layout and axis`]))),\n            updateSetting('lockedY', true), // any position clustering preserves radius from the center\n            updateSetting('background', '#f0f0f0'),\n            encodeAxis([\n              {\n                label: 'bottom category',\n                bounds: { min: 'bot min bound', max: 'bot max bound' },\n                y: 0,\n                width: 100,\n              },\n              {\n                label: 'mid category bottom',\n                bounds: { min: 'mid min', max: 'mid max' },\n                y: 20,\n                width: 200,\n              },\n              {\n                label: 'mid category top',\n                //bounds: {min: 'mid top min', max: 'mid top max'},\n                y: 40,\n                //width: 20\n              },\n              {\n                label: 'top category',\n                bounds: { min: 'top min', max: 'top max' },\n                y: 60,\n                width: 100,\n              },\n            ])\n          )\n          .subscribe(() => null),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])));\n      ////////\n      return () => (sub.unsubscribe ? sub.unsubscribe() : null);\n    }, [iframe]);\n\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  },\n};\n\n\n\nexport const tick = {\n  render: (args) => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    const [g, setG] = useState(null);\n    const [tickCount, setTickCount] = useState(0);\n\n    const milliseconds = 2000;\n\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      graphistryJS(iframe.current)\n        .pipe(tap((g) => setG(g)))\n        .subscribe(\n          (g) => setMessages((arr) => arr.concat([`graphistryJS instantiated`, String(g)])),\n          (err) => {\n            console.error('Error:', err);\n            setMessages((arr) => arr.concat([`Error: ${err}`]))\n          },\n          () => setMessages((arr) => arr.concat(['Completed'])));\n    }, [iframe]);\n\n    useEffect(() => {\n      if (!g || !tickCount) {\n        console.debug('tick not ready', {g, tickCount})\n        return;\n      }\n\n      of(g)\n      .pipe(\n        tickClustering(milliseconds)\n        //toggleClustering(tickCount % 2 == 1), //or as a toggle\n\n      ).subscribe(\n        () => setMessages((arr) => arr.concat([`ticked`])),\n        (err) => setMessages((arr) => arr.concat([`Error: ${err}`])),\n        () => setMessages((arr) => arr.concat(['Completed'])))\n    }, [tickCount]);\n\n    return <>\n      <button onClick={() => { setTickCount(tickCount + 1); }}>Run {milliseconds/1000}s of ticks</button>    \n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n    </>;\n  },\n};",locationsMap:{"predefined-dataset":{startLoc:{col:33,line:64},endLoc:{col:1,line:66},startBody:{col:33,line:64},endBody:{col:1,line:66}},"instantiate-graphistry-js":{startLoc:{col:39,line:68},endLoc:{col:1,line:104},startBody:{col:39,line:68},endBody:{col:1,line:104}},"set-settings":{startLoc:{col:27,line:218},endLoc:{col:1,line:262},startBody:{col:27,line:218},endBody:{col:1,line:262}},"set-filters":{startLoc:{col:26,line:264},endLoc:{col:1,line:297},startBody:{col:26,line:264},endBody:{col:1,line:297}},"reset-filters":{startLoc:{col:28,line:299},endLoc:{col:1,line:337},startBody:{col:28,line:299},endBody:{col:1,line:337}},"toggle-panel-filters":{startLoc:{col:34,line:339},endLoc:{col:1,line:368},startBody:{col:34,line:339},endBody:{col:1,line:368}},"hide-chrome":{startLoc:{col:26,line:370},endLoc:{col:1,line:402},startBody:{col:26,line:370},endBody:{col:1,line:402}},"radial-layout-and-axis":{startLoc:{col:35,line:404},endLoc:{col:1,line:441},startBody:{col:35,line:404},endBody:{col:1,line:441}},"vertical-layout-and-axis":{startLoc:{col:37,line:443},endLoc:{col:1,line:499},startBody:{col:37,line:443},endBody:{col:1,line:499}},tick:{startLoc:{col:20,line:503},endLoc:{col:1,line:548},startBody:{col:20,line:503},endBody:{col:1,line:548}}}}},title:"Graphistry: Vanilla JS",component:GraphistryIFrame},defaultIframeProps={style:{width:"100%",height:"100%",minHeight:"500px",border:"none"},allowFullScreen:!0},PredefinedDataset={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{src:lesMisConfigured,...args})},InstantiateGraphistryJS={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).subscribe((g=>setMessages((arr=>arr.concat(["graphistryJS instantiated: ".concat(Object.keys(g).join(", "))])))),(err=>setMessages((arr=>arr.concat(["Error: ".concat(err)])))),(()=>setMessages((arr=>arr.concat(["Completed"])))));return()=>sub.unsubscribe()}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("h3",{children:"Instantiate GraphistryJS session for iframe"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("ol",{children:messages.map(((m,i)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("li",{children:m},i)))}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:"".concat(lesMisPath,"&play=0&splashAfter=false"),...args})]})}},SUBSCRIPTION_TEST=[{a:!0,b:!1},{a:!0,b:!0},{a:!1,b:!0},{a:!0,b:!0},{a:!0,b:!1},{a:!1,b:!1},{a:!0,b:!1},{a:!1,b:!1},{a:!0,b:!0}],statusString=(a,b)=>"".concat(a?"A":".."," ").concat(b?"B":".."),GraphistryJSSubscribeToSelection=args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]),pushMessage=s=>setMessages((arr=>arr.concat([s]))),[valA,setValA]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),[valB,setValB]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{iframe.current&&(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.a)([(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current)]).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.filter)((_ref=>{let[gA,gB]=_ref;return gA&&gB})),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(1e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.switchMap)((_ref2=>{let[gA,gB]=_ref2;return(0,rxjs__WEBPACK_IMPORTED_MODULE_5__.F)(1500).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.map)((idx=>({idx,gA,gB}))))})),(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.o)((_ref3=>{let{idx}=_ref3;return idx<SUBSCRIPTION_TEST.length})),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((_ref4=>{let{idx}=_ref4;0==idx&&(pushMessage("Starting test"),console.log("APISUB","Starting test"))})),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.scan)(((_ref5,_ref6)=>{let{A,B}=_ref5,{gA,gB,idx}=_ref6;const{a,b}=SUBSCRIPTION_TEST[idx];return pushMessage(statusString(a,b)),console.log("APISUB",statusString(A,B)," -> ",statusString(a,b)),a&&!A&&(A=(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.selectionUpdates)(gA).subscribe({next:v=>{setValB(v),console.log("APISUB","Subscription A got selection",v)},error:err=>console.error("APISUB","Subscription A got error",err),complete:()=>console.log("APISUB","Subscription A completed")})),!a&&A&&(A.unsubscribe(),A=null),b&&!B&&(B=(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.selectionUpdates)(gB).subscribe({next:v=>{setValA(v),console.log("APISUB","Subscription B got selection",v)},error:err=>console.error("APISUB","Subscription B got error",err),complete:()=>console.log("APISUB","Subscription B completed")})),!b&&B&&(B.unsubscribe(),B=null),{A,B}}),{A:null,B:null})).subscribe({error:err=>pushMessage("Error: ".concat(err)),complete:()=>pushMessage("Completed")})}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("h3",{children:"Test subscribe and unsubscribe to selections."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"Click or shift drag to make selextions in the viz."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("ul",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("li",{children:["A: ",JSON.stringify(valA)]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("li",{children:["B: ",JSON.stringify(valB)]})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("ol",{children:messages.map(((m,i)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("li",{children:m},i)))}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:"".concat(lesMisPath,"&play=0&splashAfter=false&session=cycle"),...args})]})};GraphistryJSSubscribeToSelection.displayName="GraphistryJSSubscribeToSelection",console.log("Not exporting",GraphistryJSSubscribeToSelection);const SetSettings={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; changing settings"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("background","#ff0000"),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("showToolbar",!1),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["Delaying 3s and changing settings again"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("background","#00ff00"),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("showToolbar",!0),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["Delaying 3s and changing settings again"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("background","#ff0000"),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("showToolbar",!1)).subscribe((v=>setMessages((arr=>arr.concat(["pipeline event: ".concat(Object.keys(v).join(", "))])))),(err=>setMessages((arr=>arr.concat(["Error: ".concat(err)])))),(()=>setMessages((arr=>arr.concat(["Completed"])))));return()=>sub.unsubscribe()}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("h3",{children:"Set settings over time:"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("ol",{children:messages.map(((m,i)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("li",{children:m},i)))}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args})]})}},setFilters={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["adding filters"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.addFilters)(args.filters||["point:community_infomap in (4, 5, 6)","point:degree > 1"]),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.addExclusions)(args.exclusions||["edge:id = 1"]),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.togglePanel)("filters",!1)).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},ResetFilters={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["adding filters"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.addFilters)(args.filters||["point:community_infomap in (4, 5, 6)","point:degree > 1"]),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.addExclusions)(args.exclusions||["edge:id = 1"]),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.togglePanel)("filters",!1),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["pausing before removing filters"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["removing filters"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.resetFilters)(),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.resetExclusions)()).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},togglePanelFilters={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["toggling panel filters"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.togglePanel)("filters",!0)).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},HideChrome={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.delay)(3e3),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["hiding chrome"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.toggleToolbar)(!1),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.toggleHistograms)(!1),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.toggleTimebars)(!1),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.toggleInspector)(!1)).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},radialLayoutAndAxis={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["radial layout and axis"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("lockedR",!0),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("background","#f0f0f0"),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.encodeAxis)([{r:40},{internal:!0,label:"my inner label",r:80},{r:120},{external:!0,label:"my outer label",r:160},{r:200},{r:220}])).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},verticalLayoutAndAxis={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const sub=((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["graphistryJS instantiated; pausing 3s..."]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((()=>setMessages((arr=>arr.concat(["radial layout and axis"]))))),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("lockedY",!0),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.updateSetting)("background","#f0f0f0"),(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.encodeAxis)([{label:"bottom category",bounds:{min:"bot min bound",max:"bot max bound"},y:0,width:100},{label:"mid category bottom",bounds:{min:"mid min",max:"mid max"},y:20,width:200},{label:"mid category top",y:40},{label:"top category",bounds:{min:"top min",max:"top max"},y:60,width:100}])).subscribe((()=>null)),()=>setMessages((arr=>arr.concat(["Completed"]))));return()=>sub.unsubscribe?sub.unsubscribe():null}),[iframe]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}},tick={render:args=>{const iframe=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[messages,setMessages]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(["loading..."]),[g,setG]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),[tickCount,setTickCount]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.graphistryJS)(iframe.current).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tap)((g=>setG(g)))).subscribe((g=>setMessages((arr=>arr.concat(["graphistryJS instantiated",String(g)])))),(err=>{console.error("Error:",err),setMessages((arr=>arr.concat(["Error: ".concat(err)])))}),(()=>setMessages((arr=>arr.concat(["Completed"])))))}),[iframe]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{g&&tickCount?(0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.of)(g).pipe((0,_graphistry_client_api__WEBPACK_IMPORTED_MODULE_2__.tickClustering)(2e3)).subscribe((()=>setMessages((arr=>arr.concat(["ticked"])))),(err=>setMessages((arr=>arr.concat(["Error: ".concat(err)])))),(()=>setMessages((arr=>arr.concat(["Completed"]))))):console.debug("tick not ready",{g,tickCount})}),[tickCount]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("button",{onClick:()=>{setTickCount(tickCount+1)},children:["Run ",2,"s of ticks"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("iframe",{...defaultIframeProps,ref:iframe,src:lesMisNoPlayNoSplash,...args}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("pre",{children:messages.join("\n")})]})}};PredefinedDataset.parameters={...PredefinedDataset.parameters,docs:{...PredefinedDataset.parameters?.docs,source:{originalSource:"{\n  render: args => <iframe src={lesMisConfigured} {...args} />\n}",...PredefinedDataset.parameters?.docs?.source}}},InstantiateGraphistryJS.parameters={...InstantiateGraphistryJS.parameters,docs:{...InstantiateGraphistryJS.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = graphistryJS(iframe.current).subscribe(g => setMessages(arr => arr.concat([`graphistryJS instantiated: ${Object.keys(g).join(', ')}`])), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe();\n    }, [iframe]);\n    return <div>\n        <h3>Instantiate GraphistryJS session for iframe</h3>\n        <ol>\n          {messages.map((m, i) => <li key={i}>{m}</li>)}\n        </ol>\n        <iframe {...defaultIframeProps} ref={iframe} src={`${lesMisPath}&play=0&splashAfter=false`} {...args} />\n      </div>;\n  }\n}",...InstantiateGraphistryJS.parameters?.docs?.source}}},SetSettings.parameters={...SetSettings.parameters,docs:{...SetSettings.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; changing settings`]))), updateSetting('background', '#ff0000'), updateSetting('showToolbar', false), tap(() => setMessages(arr => arr.concat([`Delaying 3s and changing settings again`]))), delay(3000), updateSetting('background', '#00ff00'), updateSetting('showToolbar', true), tap(() => setMessages(arr => arr.concat([`Delaying 3s and changing settings again`]))), delay(3000), updateSetting('background', '#ff0000'), updateSetting('showToolbar', false)).subscribe(v => setMessages(arr => arr.concat([`pipeline event: ${Object.keys(v).join(', ')}`])), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe();\n    }, [iframe]);\n    return <div>\n        <h3>Set settings over time:</h3>\n        <ol>\n          {messages.map((m, i) => <li key={i}>{m}</li>)}\n        </ol>\n        <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      </div>;\n  }\n}",...SetSettings.parameters?.docs?.source}}},setFilters.parameters={...setFilters.parameters,docs:{...setFilters.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))), delay(3000), tap(() => setMessages(arr => arr.concat([`adding filters`]))), addFilters(args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']), addExclusions(args.exclusions || ['edge:id = 1']), togglePanel('filters', false)).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...setFilters.parameters?.docs?.source}}},ResetFilters.parameters={...ResetFilters.parameters,docs:{...ResetFilters.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))), delay(3000), tap(() => setMessages(arr => arr.concat([`adding filters`]))), addFilters(args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']), addExclusions(args.exclusions || ['edge:id = 1']), togglePanel('filters', false), tap(() => setMessages(arr => arr.concat([`pausing before removing filters`]))), delay(3000), tap(() => setMessages(arr => arr.concat([`removing filters`]))), resetFilters(), resetExclusions()).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...ResetFilters.parameters?.docs?.source}}},togglePanelFilters.parameters={...togglePanelFilters.parameters,docs:{...togglePanelFilters.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))), delay(3000), tap(() => setMessages(arr => arr.concat([`toggling panel filters`]))), togglePanel('filters', true)).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...togglePanelFilters.parameters?.docs?.source}}},HideChrome.parameters={...HideChrome.parameters,docs:{...HideChrome.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))), delay(3000), tap(() => setMessages(arr => arr.concat([`hiding chrome`]))), toggleToolbar(false), toggleHistograms(false), toggleTimebars(false), toggleInspector(false)).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...HideChrome.parameters?.docs?.source}}},radialLayoutAndAxis.parameters={...radialLayoutAndAxis.parameters,docs:{...radialLayoutAndAxis.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))), tap(() => setMessages(arr => arr.concat([`radial layout and axis`]))), updateSetting('lockedR', true),\n      // any position clustering preserves radius from the center\n      updateSetting('background', '#f0f0f0'), encodeAxis([{\n        r: 40\n      }, {\n        internal: true,\n        label: 'my inner label',\n        r: 80\n      }, {\n        r: 120\n      }, {\n        external: true,\n        label: 'my outer label',\n        r: 160\n      }, {\n        r: 200\n      }, {\n        r: 220\n      }])).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...radialLayoutAndAxis.parameters?.docs?.source}}},verticalLayoutAndAxis.parameters={...verticalLayoutAndAxis.parameters,docs:{...verticalLayoutAndAxis.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      const sub = (graphistryJS(iframe.current).pipe(tap(() => setMessages(arr => arr.concat([`graphistryJS instantiated; pausing 3s...`]))),\n      //delay(1000),\n      tap(() => setMessages(arr => arr.concat([`radial layout and axis`]))), updateSetting('lockedY', true),\n      // any position clustering preserves radius from the center\n      updateSetting('background', '#f0f0f0'), encodeAxis([{\n        label: 'bottom category',\n        bounds: {\n          min: 'bot min bound',\n          max: 'bot max bound'\n        },\n        y: 0,\n        width: 100\n      }, {\n        label: 'mid category bottom',\n        bounds: {\n          min: 'mid min',\n          max: 'mid max'\n        },\n        y: 20,\n        width: 200\n      }, {\n        label: 'mid category top',\n        //bounds: {min: 'mid top min', max: 'mid top max'},\n        y: 40\n        //width: 20\n      }, {\n        label: 'top category',\n        bounds: {\n          min: 'top min',\n          max: 'top max'\n        },\n        y: 60,\n        width: 100\n      }])).subscribe(() => null), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n      ////////\n      return () => sub.unsubscribe ? sub.unsubscribe() : null;\n    }, [iframe]);\n    return <>\n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n      </>;\n  }\n}",...verticalLayoutAndAxis.parameters?.docs?.source}}},tick.parameters={...tick.parameters,docs:{...tick.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const iframe = useRef(null);\n    const [messages, setMessages] = useState(['loading...']);\n    const [g, setG] = useState(null);\n    const [tickCount, setTickCount] = useState(0);\n    const milliseconds = 2000;\n    useEffect(() => {\n      //////// Instantiate GraphistryJS for an iframe\n      graphistryJS(iframe.current).pipe(tap(g => setG(g))).subscribe(g => setMessages(arr => arr.concat([`graphistryJS instantiated`, String(g)])), err => {\n        console.error('Error:', err);\n        setMessages(arr => arr.concat([`Error: ${err}`]));\n      }, () => setMessages(arr => arr.concat(['Completed'])));\n    }, [iframe]);\n    useEffect(() => {\n      if (!g || !tickCount) {\n        console.debug('tick not ready', {\n          g,\n          tickCount\n        });\n        return;\n      }\n      of(g).pipe(tickClustering(milliseconds)\n      //toggleClustering(tickCount % 2 == 1), //or as a toggle\n      ).subscribe(() => setMessages(arr => arr.concat([`ticked`])), err => setMessages(arr => arr.concat([`Error: ${err}`])), () => setMessages(arr => arr.concat(['Completed'])));\n    }, [tickCount]);\n    return <>\n      <button onClick={() => {\n        setTickCount(tickCount + 1);\n      }}>Run {milliseconds / 1000}s of ticks</button>    \n      <iframe {...defaultIframeProps} ref={iframe} src={lesMisNoPlayNoSplash} {...args} />\n      <pre>{messages.join('\\n')}</pre>\n    </>;\n  }\n}",...tick.parameters?.docs?.source}}};const __namedExportsOrder=["PredefinedDataset","InstantiateGraphistryJS","SetSettings","setFilters","ResetFilters","togglePanelFilters","HideChrome","radialLayoutAndAxis","verticalLayoutAndAxis","tick"]}}]);