"use strict";(self.webpackChunk_graphistry_client_api_react=self.webpackChunk_graphistry_client_api_react||[]).push([[157],{"./src/stories/Graphistry.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BackgroundColor:()=>BackgroundColor,BindPointColorContinuous:()=>BindPointColorContinuous,BindPointSizeCategorical:()=>BindPointSizeCategorical,CustomContainerStyleAndSize:()=>CustomContainerStyleAndSize,EdgeStyle:()=>EdgeStyle,Empty:()=>Empty,Filters:()=>Filters,HideChrome:()=>HideChrome,HideChromeButShowTools:()=>HideChromeButShowTools,HoverPropertiesInsteadOfInspector:()=>HoverPropertiesInsteadOfInspector,LabelStyle:()=>LabelStyle,LabelsOnlyOnHover:()=>LabelsOnlyOnHover,LabelsWithoutActions:()=>LabelsWithoutActions,LabelsWithoutProperties:()=>LabelsWithoutProperties,LayoutLockedRadius:()=>LayoutLockedRadius,LayoutLockedX:()=>LayoutLockedX,LayoutLockedY:()=>LayoutLockedY,LayoutSettings:()=>LayoutSettings,ManyPointsOfInterest:()=>ManyPointsOfInterest,NeighborhoodHighlightStyle:()=>NeighborhoodHighlightStyle,NoClusteringOnLoad:()=>NoClusteringOnLoad,NoSplashScreen:()=>NoSplashScreen,OnClientAPIConnected:()=>OnClientAPIConnected,OnLabelUpdate:()=>OnLabelUpdate,OnSelectionUpdate:()=>OnSelectionUpdate,OneSecondClusteringOnLoad:()=>OneSecondClusteringOnLoad,PointStyle:()=>PointStyle,PointsOfInterestWithoutTextLabel:()=>PointsOfInterestWithoutTextLabel,PredefinedDataset:()=>PredefinedDataset,RadialAxisAndLayout:()=>RadialAxisAndLayout,ScalePointSize:()=>ScalePointSize,Ticks:()=>Ticks,TogglePanelExclusions:()=>TogglePanelExclusions,TogglePanelFilters:()=>TogglePanelFilters,TogglePanelLabels:()=>TogglePanelLabels,TogglePanelLayout:()=>TogglePanelLayout,TogglePanelNone:()=>TogglePanelNone,TogglePanelScene:()=>TogglePanelScene,VerticalAxisAndLayout:()=>VerticalAxisAndLayout,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_index__WEBPACK_IMPORTED_MODULE_2__=(__webpack_require__("./assets/index.css"),__webpack_require__("./src/index.js")),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Graphistry: React style",component:_index__WEBPACK_IMPORTED_MODULE_2__.$E,parameters:{storySource:{source:"import React, { useState } from 'react';\nimport '../../assets/index.css';\n\nimport { Graphistry } from '../index';\n\nexport default {\n  title: 'Graphistry: React style',\n  component: Graphistry,\n\n  // override the default behaviour of passing action-props for every prop that\n  // starts with 'on' (see the Storybook config 'preview.js')\n  parameters: { actions: { argTypesRegex: null } },\n};\n\nexport const Empty = {};\nexport const PredefinedDataset = {\n  render: (args) => <Graphistry {...args} dataset=\"Miserables\" showSplashScreen={true} />,\n};\n\nconst defaultSettings = {\n  dataset: 'Miserables',\n  play: 1,\n  showSplashScreen: true,\n};\n\nexport const NoSplashScreen = {\n  render: (args) => <Graphistry {...defaultSettings} {...args} showSplashScreen={false} />,\n};\n\nexport const OnClientAPIConnected = {\n  render: (args) => {\n    const [loaded, setLoaded] = useState(false);\n\n    return (\n      <div>\n        {loaded ? '...loaded!' : 'not loaded...'}\n        <Graphistry\n          {...defaultSettings}\n          {...args}\n          onClientAPIConnected={() => {\n            setLoaded(true);\n          }}\n        />\n      </div>\n    );\n  },\n};\n\nexport const OnSelectionUpdate = {\n  render: (args) => {\n    const [selection, setSelection] = useState(undefined);\n\n    const onSelectionUpdate = (err, v) => {\n      console.log('onSelectionUpdate', err, v);\n      setSelection({ v, err: (err || {}).message });\n    };\n\n    return (\n      <div>\n        {`Selection: ${JSON.stringify(selection)}`}\n        <Graphistry {...defaultSettings} {...args} onSelectionUpdate={onSelectionUpdate} />\n      </div>\n    );\n  },\n};\n\nexport const OnLabelUpdate = {\n  render: (args) => {\n    const [labels, setLabels] = useState(undefined);\n\n    const onLabelsUpdate = (err, v) => {\n      console.log('onLabelsUpdate', err, v);\n      setLabels({ v, err });\n    };\n\n    return (\n      <div>\n        {`Labels: ${JSON.stringify(labels)}`}\n        <Graphistry {...defaultSettings} {...args} onLabelsUpdate={onLabelsUpdate} />\n      </div>\n    );\n  },\n};\n\nexport const NoClusteringOnLoad = {\n  render: (args) => <Graphistry {...defaultSettings} {...args} play={0} />,\n};\nexport const OneSecondClusteringOnLoad = {\n  render: (args) => <Graphistry {...defaultSettings} {...args} play={1} />,\n};\nexport const CustomContainerStyleAndSize = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      {...args}\n      containerStyle={{\n        width: '100px',\n        height: '100px',\n        backgroundColor: 'red',\n        border: '4px dotted blue',\n      }}\n      containerClassName=\"\"\n      iframeClassName=\"\"\n      iframeStyle={{\n        width: '100%',\n        height: '100%',\n        border: 'none',\n      }}\n    />\n  ),\n};\n\nexport const BackgroundColor = {\n  render: (args) => <Graphistry {...defaultSettings} backgroundColor=\"#f0f0f0\" {...args} />,\n};\n\nexport const LabelStyle = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      labelOpacity={0.5}\n      labelColor=\"magenta\"\n      labelBackground=\"#ffffff\"\n      {...args}\n    />\n  ),\n};\n\nexport const PointStyle = {\n  render: (args) => <Graphistry {...defaultSettings} pointSize={10} pointOpacity={0.5} {...args} />,\n};\n\nexport const EdgeStyle = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      edgeCurvature={0.5}\n      edgeOpacity={0.5}\n      showArrows={false}\n      {...args}\n    />\n  ),\n};\n\nexport const NeighborhoodHighlightStyle = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      neighborhoodHighlight={'incoming'}\n      neighborhoodHighlightHos={2}\n      {...args}\n    />\n  ),\n};\n\nexport const HoverPropertiesInsteadOfInspector = {\n  render: (args) => <Graphistry {...defaultSettings} showLabelPropertiesOnHover={true} {...args} />,\n};\n\nexport const LabelsWithoutProperties = {\n  render: (args) => <Graphistry {...defaultSettings} showLabelInspector={false} {...args} />,\n};\n\nexport const LabelsWithoutActions = {\n  render: (args) => <Graphistry {...defaultSettings} showLabelActions={false} {...args} />,\n};\n\nexport const LabelsOnlyOnHover = {\n  render: (args) => <Graphistry {...defaultSettings} showPointsOfInterest={false} {...args} />,\n};\n\nexport const PointsOfInterestWithoutTextLabel = {\n  render: (args) => (\n    <Graphistry {...defaultSettings} showPointsOfInterestLabels={false} {...args} />\n  ),\n};\n\nexport const ManyPointsOfInterest = {\n  render: (args) => <Graphistry {...defaultSettings} pointsOfInterestMax={50} {...args} />,\n};\n\nexport const HideChrome = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      showToolbar={false}\n      showInfo={false}\n      showMenu={false}\n      showHistograms={false}\n      {...args}\n    />\n  ),\n};\n\nexport const HideChromeButShowTools = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      showToolbar={false}\n      showInfo={false}\n      showMenu={false}\n      showHistograms={true}\n      showInspector={true}\n      showLabelInspector={true}\n      showLabelActions={true}\n      {...args}\n    />\n  ),\n};\n\nexport const TogglePanelFilters = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={'filters'} {...args} />,\n};\n\nexport const TogglePanelExclusions = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={'exclusions'} {...args} />,\n};\n\nexport const TogglePanelScene = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={'scene'} {...args} />,\n};\n\nexport const TogglePanelLabels = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={'labels'} {...args} />,\n};\n\nexport const TogglePanelLayout = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={'layout'} {...args} />,\n};\n\nexport const TogglePanelNone = {\n  render: (args) => <Graphistry {...defaultSettings} togglePanel={false} {...args} />,\n};\n\nexport const ScalePointSize = {\n  render: (args) => (\n    <Graphistry {...defaultSettings} encodePointSize={'betweenness'} pointSize={0.2} {...args} />\n  ),\n};\n\nexport const BindPointSizeCategorical = {\n  render: (args) => {\n    //Load sizes 3s after client connected (workaround timing bug)\n    const [sizes, setSizes] = useState();\n\n    return (\n      <Graphistry\n        {...defaultSettings}\n        dataset={'6fbdc5fb9ca64f37ade8a7a5ccb337f0'}\n        {...args}\n        onClientAPIConnected={() => {\n          setTimeout(() => {\n            console.debug('Setting sizes 3s after client connected');\n            setSizes(\n              args.encodePointSize || [\n                'tag_wearamask',\n                {\n                  encodingType: 'size',\n                  graphType: 'point',\n                  attribute: 'tag_wearamask',\n                  mapping: {\n                    categorical: {\n                      fixed: {\n                        0: 1,\n                        1: 1,\n                        2: 10,\n                        3: 1,\n                        4: 1,\n                      },\n                      other: 1,\n                    },\n                  },\n                },\n              ]\n            );\n          }, 3000);\n        }}\n        encodePointSize={sizes}\n        pointSize={0.5}\n      />\n    );\n  },\n};\n\nexport const BindPointColorContinuous = {\n  render: (args) => {\n    //Load colors 3s after client connected (workaround timing bug)\n    const [colors, setColors] = useState();\n\n    return (\n      <Graphistry\n        {...defaultSettings}\n        dataset={'6fbdc5fb9ca64f37ade8a7a5ccb337f0'}\n        {...args}\n        onClientAPIConnected={() => {\n          setTimeout(() => {\n            console.debug('Setting colors 3s after client connected');\n            setColors(\n              args.encodePointColor || ['degree', 'continuous', ['#00f', '#f00', 'yellow']]\n            );\n          }, 3000);\n        }}\n        encodePointColor={colors}\n      />\n    );\n  },\n};\n\nexport const LayoutSettings = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      precisionVsSpeed={0.5}\n      gravity={0.5}\n      scalingRatio={0.5}\n      edgeInfluence={0.5}\n      strongGravity={true}\n      dissuadeHubs={true}\n      linLog={true}\n      {...args}\n    />\n  ),\n};\n\nexport const LayoutLockedX = {\n  render: (args) => <Graphistry {...defaultSettings} lockedX={true} {...args} />,\n};\n\nexport const LayoutLockedY = {\n  render: (args) => <Graphistry {...defaultSettings} lockedY={true} {...args} />,\n};\n\nexport const LayoutLockedRadius = {\n  render: (args) => <Graphistry {...defaultSettings} lockedR={true} {...args} />,\n};\n\nexport const RadialAxisAndLayout = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      lockedR={true}\n      backgroundColor=\"#f0f0f0\"\n      axes={[\n        { r: 40 },\n        { internal: true, label: 'my inner label', r: 80 },\n        { r: 120 },\n        { external: true, label: 'my outer label', r: 160 },\n        { r: 200 },\n        { r: 220 },\n      ]}\n    />\n  ),\n};\n\nexport const VerticalAxisAndLayout = {\n  render: (args) => (\n    <Graphistry\n      {...defaultSettings}\n      lockedY={true}\n      backgroundColor=\"#f0f0f0\"\n      axes={[\n        {\n          label: 'bottom category',\n          bounds: { min: 'bot min bound', max: 'bot max bound' },\n          y: 0,\n          width: 100,\n        },\n        {\n          label: 'mid category bottom',\n          bounds: { min: 'mid min', max: 'mid max' },\n          y: 20,\n          width: 200,\n        },\n        {\n          label: 'mid category top',\n          //bounds: {min: 'mid top min', max: 'mid top max'},\n          y: 40,\n          //width: 20\n        },\n        {\n          label: 'top category',\n          bounds: { min: 'top min', max: 'top max' },\n          y: 60,\n          width: 100,\n        },\n      ]}\n    />\n  ),\n};\nexport const Filters = {\n  render: (args) => {\n    //Load filters 1s after client connected (workaround timing bug)\n    const [filter, setFilter] = useState();\n    const [exclusion, setExclusion] = useState();\n    const [panel, setPanel] = useState();\n\n    return (\n      <Graphistry\n        {...defaultSettings}\n        pruneOrphans={true}\n        {...args}\n        onClientAPIConnected={() => {\n          console.debug('Client connected, setting filters and exclusions after 3s');\n          setTimeout(() => {\n            setFilter(args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']);\n            setExclusion(args.exclusions || ['edge:id = 1']);\n            setPanel(['filters', false]);\n          }, 3000);\n        }}\n        togglePanel={panel}\n        exclusions={exclusion}\n        filters={filter}\n      />\n    );\n  },\n};\n\nexport const Ticks = {\n  render: (args) => <h2>Not implemented</h2>,\n};\n",locationsMap:{empty:{startLoc:{col:21,line:15},endLoc:{col:23,line:15},startBody:{col:21,line:15},endBody:{col:23,line:15}},"predefined-dataset":{startLoc:{col:33,line:16},endLoc:{col:1,line:18},startBody:{col:33,line:16},endBody:{col:1,line:18}},"no-splash-screen":{startLoc:{col:30,line:26},endLoc:{col:1,line:28},startBody:{col:30,line:26},endBody:{col:1,line:28}},"on-client-api-connected":{startLoc:{col:36,line:30},endLoc:{col:1,line:47},startBody:{col:36,line:30},endBody:{col:1,line:47}},"on-selection-update":{startLoc:{col:33,line:49},endLoc:{col:1,line:65},startBody:{col:33,line:49},endBody:{col:1,line:65}},"on-label-update":{startLoc:{col:29,line:67},endLoc:{col:1,line:83},startBody:{col:29,line:67},endBody:{col:1,line:83}},"no-clustering-on-load":{startLoc:{col:34,line:85},endLoc:{col:1,line:87},startBody:{col:34,line:85},endBody:{col:1,line:87}},"one-second-clustering-on-load":{startLoc:{col:41,line:88},endLoc:{col:1,line:90},startBody:{col:41,line:88},endBody:{col:1,line:90}},"custom-container-style-and-size":{startLoc:{col:43,line:91},endLoc:{col:1,line:111},startBody:{col:43,line:91},endBody:{col:1,line:111}},"background-color":{startLoc:{col:31,line:113},endLoc:{col:1,line:115},startBody:{col:31,line:113},endBody:{col:1,line:115}},"label-style":{startLoc:{col:26,line:117},endLoc:{col:1,line:127},startBody:{col:26,line:117},endBody:{col:1,line:127}},"point-style":{startLoc:{col:26,line:129},endLoc:{col:1,line:131},startBody:{col:26,line:129},endBody:{col:1,line:131}},"edge-style":{startLoc:{col:25,line:133},endLoc:{col:1,line:143},startBody:{col:25,line:133},endBody:{col:1,line:143}},"neighborhood-highlight-style":{startLoc:{col:42,line:145},endLoc:{col:1,line:154},startBody:{col:42,line:145},endBody:{col:1,line:154}},"hover-properties-instead-of-inspector":{startLoc:{col:49,line:156},endLoc:{col:1,line:158},startBody:{col:49,line:156},endBody:{col:1,line:158}},"labels-without-properties":{startLoc:{col:39,line:160},endLoc:{col:1,line:162},startBody:{col:39,line:160},endBody:{col:1,line:162}},"labels-without-actions":{startLoc:{col:36,line:164},endLoc:{col:1,line:166},startBody:{col:36,line:164},endBody:{col:1,line:166}},"labels-only-on-hover":{startLoc:{col:33,line:168},endLoc:{col:1,line:170},startBody:{col:33,line:168},endBody:{col:1,line:170}},"points-of-interest-without-text-label":{startLoc:{col:48,line:172},endLoc:{col:1,line:176},startBody:{col:48,line:172},endBody:{col:1,line:176}},"many-points-of-interest":{startLoc:{col:36,line:178},endLoc:{col:1,line:180},startBody:{col:36,line:178},endBody:{col:1,line:180}},"hide-chrome":{startLoc:{col:26,line:182},endLoc:{col:1,line:193},startBody:{col:26,line:182},endBody:{col:1,line:193}},"hide-chrome-but-show-tools":{startLoc:{col:38,line:195},endLoc:{col:1,line:209},startBody:{col:38,line:195},endBody:{col:1,line:209}},"toggle-panel-filters":{startLoc:{col:34,line:211},endLoc:{col:1,line:213},startBody:{col:34,line:211},endBody:{col:1,line:213}},"toggle-panel-exclusions":{startLoc:{col:37,line:215},endLoc:{col:1,line:217},startBody:{col:37,line:215},endBody:{col:1,line:217}},"toggle-panel-scene":{startLoc:{col:32,line:219},endLoc:{col:1,line:221},startBody:{col:32,line:219},endBody:{col:1,line:221}},"toggle-panel-labels":{startLoc:{col:33,line:223},endLoc:{col:1,line:225},startBody:{col:33,line:223},endBody:{col:1,line:225}},"toggle-panel-layout":{startLoc:{col:33,line:227},endLoc:{col:1,line:229},startBody:{col:33,line:227},endBody:{col:1,line:229}},"toggle-panel-none":{startLoc:{col:31,line:231},endLoc:{col:1,line:233},startBody:{col:31,line:231},endBody:{col:1,line:233}},"scale-point-size":{startLoc:{col:30,line:235},endLoc:{col:1,line:239},startBody:{col:30,line:235},endBody:{col:1,line:239}},"bind-point-size-categorical":{startLoc:{col:40,line:241},endLoc:{col:1,line:283},startBody:{col:40,line:241},endBody:{col:1,line:283}},"bind-point-color-continuous":{startLoc:{col:40,line:285},endLoc:{col:1,line:307},startBody:{col:40,line:285},endBody:{col:1,line:307}},"layout-settings":{startLoc:{col:30,line:309},endLoc:{col:1,line:323},startBody:{col:30,line:309},endBody:{col:1,line:323}},"layout-locked-x":{startLoc:{col:29,line:325},endLoc:{col:1,line:327},startBody:{col:29,line:325},endBody:{col:1,line:327}},"layout-locked-y":{startLoc:{col:29,line:329},endLoc:{col:1,line:331},startBody:{col:29,line:329},endBody:{col:1,line:331}},"layout-locked-radius":{startLoc:{col:34,line:333},endLoc:{col:1,line:335},startBody:{col:34,line:333},endBody:{col:1,line:335}},"radial-axis-and-layout":{startLoc:{col:35,line:337},endLoc:{col:1,line:353},startBody:{col:35,line:337},endBody:{col:1,line:353}},"vertical-axis-and-layout":{startLoc:{col:37,line:355},endLoc:{col:1,line:389},startBody:{col:37,line:355},endBody:{col:1,line:389}},filters:{startLoc:{col:23,line:390},endLoc:{col:1,line:416},startBody:{col:23,line:390},endBody:{col:1,line:416}},ticks:{startLoc:{col:21,line:418},endLoc:{col:1,line:420},startBody:{col:21,line:418},endBody:{col:1,line:420}}}},actions:{argTypesRegex:null}}},Empty={},PredefinedDataset={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...args,dataset:"Miserables",showSplashScreen:!0})},defaultSettings={dataset:"Miserables",play:1,showSplashScreen:!0},NoSplashScreen={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,showSplashScreen:!1})},OnClientAPIConnected={render:args=>{const[loaded,setLoaded]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:[loaded?"...loaded!":"not loaded...",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,onClientAPIConnected:()=>{setLoaded(!0)}})]})}},OnSelectionUpdate={render:args=>{const[selection,setSelection]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:["Selection: ".concat(JSON.stringify(selection)),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,onSelectionUpdate:(err,v)=>{console.log("onSelectionUpdate",err,v),setSelection({v,err:(err||{}).message})}})]})}},OnLabelUpdate={render:args=>{const[labels,setLabels]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:["Labels: ".concat(JSON.stringify(labels)),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,onLabelsUpdate:(err,v)=>{console.log("onLabelsUpdate",err,v),setLabels({v,err})}})]})}},NoClusteringOnLoad={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,play:0})},OneSecondClusteringOnLoad={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,play:1})},CustomContainerStyleAndSize={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,...args,containerStyle:{width:"100px",height:"100px",backgroundColor:"red",border:"4px dotted blue"},containerClassName:"",iframeClassName:"",iframeStyle:{width:"100%",height:"100%",border:"none"}})},BackgroundColor={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,backgroundColor:"#f0f0f0",...args})},LabelStyle={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,labelOpacity:.5,labelColor:"magenta",labelBackground:"#ffffff",...args})},PointStyle={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,pointSize:10,pointOpacity:.5,...args})},EdgeStyle={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,edgeCurvature:.5,edgeOpacity:.5,showArrows:!1,...args})},NeighborhoodHighlightStyle={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,neighborhoodHighlight:"incoming",neighborhoodHighlightHos:2,...args})},HoverPropertiesInsteadOfInspector={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showLabelPropertiesOnHover:!0,...args})},LabelsWithoutProperties={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showLabelInspector:!1,...args})},LabelsWithoutActions={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showLabelActions:!1,...args})},LabelsOnlyOnHover={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showPointsOfInterest:!1,...args})},PointsOfInterestWithoutTextLabel={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showPointsOfInterestLabels:!1,...args})},ManyPointsOfInterest={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,pointsOfInterestMax:50,...args})},HideChrome={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showToolbar:!1,showInfo:!1,showMenu:!1,showHistograms:!1,...args})},HideChromeButShowTools={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,showToolbar:!1,showInfo:!1,showMenu:!1,showHistograms:!0,showInspector:!0,showLabelInspector:!0,showLabelActions:!0,...args})},TogglePanelFilters={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:"filters",...args})},TogglePanelExclusions={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:"exclusions",...args})},TogglePanelScene={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:"scene",...args})},TogglePanelLabels={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:"labels",...args})},TogglePanelLayout={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:"layout",...args})},TogglePanelNone={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,togglePanel:!1,...args})},ScalePointSize={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,encodePointSize:"betweenness",pointSize:.2,...args})},BindPointSizeCategorical={render:args=>{const[sizes,setSizes]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,dataset:"6fbdc5fb9ca64f37ade8a7a5ccb337f0",...args,onClientAPIConnected:()=>{setTimeout((()=>{console.debug("Setting sizes 3s after client connected"),setSizes(args.encodePointSize||["tag_wearamask",{encodingType:"size",graphType:"point",attribute:"tag_wearamask",mapping:{categorical:{fixed:{0:1,1:1,2:10,3:1,4:1},other:1}}}])}),3e3)},encodePointSize:sizes,pointSize:.5})}},BindPointColorContinuous={render:args=>{const[colors,setColors]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,dataset:"6fbdc5fb9ca64f37ade8a7a5ccb337f0",...args,onClientAPIConnected:()=>{setTimeout((()=>{console.debug("Setting colors 3s after client connected"),setColors(args.encodePointColor||["degree","continuous",["#00f","#f00","yellow"]])}),3e3)},encodePointColor:colors})}},LayoutSettings={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,precisionVsSpeed:.5,gravity:.5,scalingRatio:.5,edgeInfluence:.5,strongGravity:!0,dissuadeHubs:!0,linLog:!0,...args})},LayoutLockedX={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,lockedX:!0,...args})},LayoutLockedY={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,lockedY:!0,...args})},LayoutLockedRadius={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,lockedR:!0,...args})},RadialAxisAndLayout={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,lockedR:!0,backgroundColor:"#f0f0f0",axes:[{r:40},{internal:!0,label:"my inner label",r:80},{r:120},{external:!0,label:"my outer label",r:160},{r:200},{r:220}]})},VerticalAxisAndLayout={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,lockedY:!0,backgroundColor:"#f0f0f0",axes:[{label:"bottom category",bounds:{min:"bot min bound",max:"bot max bound"},y:0,width:100},{label:"mid category bottom",bounds:{min:"mid min",max:"mid max"},y:20,width:200},{label:"mid category top",y:40},{label:"top category",bounds:{min:"top min",max:"top max"},y:60,width:100}]})},Filters={render:args=>{const[filter,setFilter]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),[exclusion,setExclusion]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),[panel,setPanel]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index__WEBPACK_IMPORTED_MODULE_2__.$E,{...defaultSettings,pruneOrphans:!0,...args,onClientAPIConnected:()=>{console.debug("Client connected, setting filters and exclusions after 3s"),setTimeout((()=>{setFilter(args.filters||["point:community_infomap in (4, 5, 6)","point:degree > 1"]),setExclusion(args.exclusions||["edge:id = 1"]),setPanel(["filters",!1])}),3e3)},togglePanel:panel,exclusions:exclusion,filters:filter})}},Ticks={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("h2",{children:"Not implemented"})};Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"{}",...Empty.parameters?.docs?.source}}},PredefinedDataset.parameters={...PredefinedDataset.parameters,docs:{...PredefinedDataset.parameters?.docs,source:{originalSource:'{\n  render: args => <Graphistry {...args} dataset="Miserables" showSplashScreen={true} />\n}',...PredefinedDataset.parameters?.docs?.source}}},NoSplashScreen.parameters={...NoSplashScreen.parameters,docs:{...NoSplashScreen.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} {...args} showSplashScreen={false} />\n}",...NoSplashScreen.parameters?.docs?.source}}},OnClientAPIConnected.parameters={...OnClientAPIConnected.parameters,docs:{...OnClientAPIConnected.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [loaded, setLoaded] = useState(false);\n    return <div>\n        {loaded ? '...loaded!' : 'not loaded...'}\n        <Graphistry {...defaultSettings} {...args} onClientAPIConnected={() => {\n        setLoaded(true);\n      }} />\n      </div>;\n  }\n}",...OnClientAPIConnected.parameters?.docs?.source}}},OnSelectionUpdate.parameters={...OnSelectionUpdate.parameters,docs:{...OnSelectionUpdate.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [selection, setSelection] = useState(undefined);\n    const onSelectionUpdate = (err, v) => {\n      console.log('onSelectionUpdate', err, v);\n      setSelection({\n        v,\n        err: (err || {}).message\n      });\n    };\n    return <div>\n        {`Selection: ${JSON.stringify(selection)}`}\n        <Graphistry {...defaultSettings} {...args} onSelectionUpdate={onSelectionUpdate} />\n      </div>;\n  }\n}",...OnSelectionUpdate.parameters?.docs?.source}}},OnLabelUpdate.parameters={...OnLabelUpdate.parameters,docs:{...OnLabelUpdate.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [labels, setLabels] = useState(undefined);\n    const onLabelsUpdate = (err, v) => {\n      console.log('onLabelsUpdate', err, v);\n      setLabels({\n        v,\n        err\n      });\n    };\n    return <div>\n        {`Labels: ${JSON.stringify(labels)}`}\n        <Graphistry {...defaultSettings} {...args} onLabelsUpdate={onLabelsUpdate} />\n      </div>;\n  }\n}",...OnLabelUpdate.parameters?.docs?.source}}},NoClusteringOnLoad.parameters={...NoClusteringOnLoad.parameters,docs:{...NoClusteringOnLoad.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} {...args} play={0} />\n}",...NoClusteringOnLoad.parameters?.docs?.source}}},OneSecondClusteringOnLoad.parameters={...OneSecondClusteringOnLoad.parameters,docs:{...OneSecondClusteringOnLoad.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} {...args} play={1} />\n}",...OneSecondClusteringOnLoad.parameters?.docs?.source}}},CustomContainerStyleAndSize.parameters={...CustomContainerStyleAndSize.parameters,docs:{...CustomContainerStyleAndSize.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} {...args} containerStyle={{\n    width: '100px',\n    height: '100px',\n    backgroundColor: 'red',\n    border: '4px dotted blue'\n  }} containerClassName=\"\" iframeClassName=\"\" iframeStyle={{\n    width: '100%',\n    height: '100%',\n    border: 'none'\n  }} />\n}",...CustomContainerStyleAndSize.parameters?.docs?.source}}},BackgroundColor.parameters={...BackgroundColor.parameters,docs:{...BackgroundColor.parameters?.docs,source:{originalSource:'{\n  render: args => <Graphistry {...defaultSettings} backgroundColor="#f0f0f0" {...args} />\n}',...BackgroundColor.parameters?.docs?.source}}},LabelStyle.parameters={...LabelStyle.parameters,docs:{...LabelStyle.parameters?.docs,source:{originalSource:'{\n  render: args => <Graphistry {...defaultSettings} labelOpacity={0.5} labelColor="magenta" labelBackground="#ffffff" {...args} />\n}',...LabelStyle.parameters?.docs?.source}}},PointStyle.parameters={...PointStyle.parameters,docs:{...PointStyle.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} pointSize={10} pointOpacity={0.5} {...args} />\n}",...PointStyle.parameters?.docs?.source}}},EdgeStyle.parameters={...EdgeStyle.parameters,docs:{...EdgeStyle.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} edgeCurvature={0.5} edgeOpacity={0.5} showArrows={false} {...args} />\n}",...EdgeStyle.parameters?.docs?.source}}},NeighborhoodHighlightStyle.parameters={...NeighborhoodHighlightStyle.parameters,docs:{...NeighborhoodHighlightStyle.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} neighborhoodHighlight={'incoming'} neighborhoodHighlightHos={2} {...args} />\n}",...NeighborhoodHighlightStyle.parameters?.docs?.source}}},HoverPropertiesInsteadOfInspector.parameters={...HoverPropertiesInsteadOfInspector.parameters,docs:{...HoverPropertiesInsteadOfInspector.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showLabelPropertiesOnHover={true} {...args} />\n}",...HoverPropertiesInsteadOfInspector.parameters?.docs?.source}}},LabelsWithoutProperties.parameters={...LabelsWithoutProperties.parameters,docs:{...LabelsWithoutProperties.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showLabelInspector={false} {...args} />\n}",...LabelsWithoutProperties.parameters?.docs?.source}}},LabelsWithoutActions.parameters={...LabelsWithoutActions.parameters,docs:{...LabelsWithoutActions.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showLabelActions={false} {...args} />\n}",...LabelsWithoutActions.parameters?.docs?.source}}},LabelsOnlyOnHover.parameters={...LabelsOnlyOnHover.parameters,docs:{...LabelsOnlyOnHover.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showPointsOfInterest={false} {...args} />\n}",...LabelsOnlyOnHover.parameters?.docs?.source}}},PointsOfInterestWithoutTextLabel.parameters={...PointsOfInterestWithoutTextLabel.parameters,docs:{...PointsOfInterestWithoutTextLabel.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showPointsOfInterestLabels={false} {...args} />\n}",...PointsOfInterestWithoutTextLabel.parameters?.docs?.source}}},ManyPointsOfInterest.parameters={...ManyPointsOfInterest.parameters,docs:{...ManyPointsOfInterest.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} pointsOfInterestMax={50} {...args} />\n}",...ManyPointsOfInterest.parameters?.docs?.source}}},HideChrome.parameters={...HideChrome.parameters,docs:{...HideChrome.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showToolbar={false} showInfo={false} showMenu={false} showHistograms={false} {...args} />\n}",...HideChrome.parameters?.docs?.source}}},HideChromeButShowTools.parameters={...HideChromeButShowTools.parameters,docs:{...HideChromeButShowTools.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} showToolbar={false} showInfo={false} showMenu={false} showHistograms={true} showInspector={true} showLabelInspector={true} showLabelActions={true} {...args} />\n}",...HideChromeButShowTools.parameters?.docs?.source}}},TogglePanelFilters.parameters={...TogglePanelFilters.parameters,docs:{...TogglePanelFilters.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={'filters'} {...args} />\n}",...TogglePanelFilters.parameters?.docs?.source}}},TogglePanelExclusions.parameters={...TogglePanelExclusions.parameters,docs:{...TogglePanelExclusions.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={'exclusions'} {...args} />\n}",...TogglePanelExclusions.parameters?.docs?.source}}},TogglePanelScene.parameters={...TogglePanelScene.parameters,docs:{...TogglePanelScene.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={'scene'} {...args} />\n}",...TogglePanelScene.parameters?.docs?.source}}},TogglePanelLabels.parameters={...TogglePanelLabels.parameters,docs:{...TogglePanelLabels.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={'labels'} {...args} />\n}",...TogglePanelLabels.parameters?.docs?.source}}},TogglePanelLayout.parameters={...TogglePanelLayout.parameters,docs:{...TogglePanelLayout.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={'layout'} {...args} />\n}",...TogglePanelLayout.parameters?.docs?.source}}},TogglePanelNone.parameters={...TogglePanelNone.parameters,docs:{...TogglePanelNone.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} togglePanel={false} {...args} />\n}",...TogglePanelNone.parameters?.docs?.source}}},ScalePointSize.parameters={...ScalePointSize.parameters,docs:{...ScalePointSize.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} encodePointSize={'betweenness'} pointSize={0.2} {...args} />\n}",...ScalePointSize.parameters?.docs?.source}}},BindPointSizeCategorical.parameters={...BindPointSizeCategorical.parameters,docs:{...BindPointSizeCategorical.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    //Load sizes 3s after client connected (workaround timing bug)\n    const [sizes, setSizes] = useState();\n    return <Graphistry {...defaultSettings} dataset={'6fbdc5fb9ca64f37ade8a7a5ccb337f0'} {...args} onClientAPIConnected={() => {\n      setTimeout(() => {\n        console.debug('Setting sizes 3s after client connected');\n        setSizes(args.encodePointSize || ['tag_wearamask', {\n          encodingType: 'size',\n          graphType: 'point',\n          attribute: 'tag_wearamask',\n          mapping: {\n            categorical: {\n              fixed: {\n                0: 1,\n                1: 1,\n                2: 10,\n                3: 1,\n                4: 1\n              },\n              other: 1\n            }\n          }\n        }]);\n      }, 3000);\n    }} encodePointSize={sizes} pointSize={0.5} />;\n  }\n}",...BindPointSizeCategorical.parameters?.docs?.source}}},BindPointColorContinuous.parameters={...BindPointColorContinuous.parameters,docs:{...BindPointColorContinuous.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    //Load colors 3s after client connected (workaround timing bug)\n    const [colors, setColors] = useState();\n    return <Graphistry {...defaultSettings} dataset={'6fbdc5fb9ca64f37ade8a7a5ccb337f0'} {...args} onClientAPIConnected={() => {\n      setTimeout(() => {\n        console.debug('Setting colors 3s after client connected');\n        setColors(args.encodePointColor || ['degree', 'continuous', ['#00f', '#f00', 'yellow']]);\n      }, 3000);\n    }} encodePointColor={colors} />;\n  }\n}",...BindPointColorContinuous.parameters?.docs?.source}}},LayoutSettings.parameters={...LayoutSettings.parameters,docs:{...LayoutSettings.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} precisionVsSpeed={0.5} gravity={0.5} scalingRatio={0.5} edgeInfluence={0.5} strongGravity={true} dissuadeHubs={true} linLog={true} {...args} />\n}",...LayoutSettings.parameters?.docs?.source}}},LayoutLockedX.parameters={...LayoutLockedX.parameters,docs:{...LayoutLockedX.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} lockedX={true} {...args} />\n}",...LayoutLockedX.parameters?.docs?.source}}},LayoutLockedY.parameters={...LayoutLockedY.parameters,docs:{...LayoutLockedY.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} lockedY={true} {...args} />\n}",...LayoutLockedY.parameters?.docs?.source}}},LayoutLockedRadius.parameters={...LayoutLockedRadius.parameters,docs:{...LayoutLockedRadius.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} lockedR={true} {...args} />\n}",...LayoutLockedRadius.parameters?.docs?.source}}},RadialAxisAndLayout.parameters={...RadialAxisAndLayout.parameters,docs:{...RadialAxisAndLayout.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} lockedR={true} backgroundColor=\"#f0f0f0\" axes={[{\n    r: 40\n  }, {\n    internal: true,\n    label: 'my inner label',\n    r: 80\n  }, {\n    r: 120\n  }, {\n    external: true,\n    label: 'my outer label',\n    r: 160\n  }, {\n    r: 200\n  }, {\n    r: 220\n  }]} />\n}",...RadialAxisAndLayout.parameters?.docs?.source}}},VerticalAxisAndLayout.parameters={...VerticalAxisAndLayout.parameters,docs:{...VerticalAxisAndLayout.parameters?.docs,source:{originalSource:"{\n  render: args => <Graphistry {...defaultSettings} lockedY={true} backgroundColor=\"#f0f0f0\" axes={[{\n    label: 'bottom category',\n    bounds: {\n      min: 'bot min bound',\n      max: 'bot max bound'\n    },\n    y: 0,\n    width: 100\n  }, {\n    label: 'mid category bottom',\n    bounds: {\n      min: 'mid min',\n      max: 'mid max'\n    },\n    y: 20,\n    width: 200\n  }, {\n    label: 'mid category top',\n    //bounds: {min: 'mid top min', max: 'mid top max'},\n    y: 40\n    //width: 20\n  }, {\n    label: 'top category',\n    bounds: {\n      min: 'top min',\n      max: 'top max'\n    },\n    y: 60,\n    width: 100\n  }]} />\n}",...VerticalAxisAndLayout.parameters?.docs?.source}}},Filters.parameters={...Filters.parameters,docs:{...Filters.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    //Load filters 1s after client connected (workaround timing bug)\n    const [filter, setFilter] = useState();\n    const [exclusion, setExclusion] = useState();\n    const [panel, setPanel] = useState();\n    return <Graphistry {...defaultSettings} pruneOrphans={true} {...args} onClientAPIConnected={() => {\n      console.debug('Client connected, setting filters and exclusions after 3s');\n      setTimeout(() => {\n        setFilter(args.filters || ['point:community_infomap in (4, 5, 6)', 'point:degree > 1']);\n        setExclusion(args.exclusions || ['edge:id = 1']);\n        setPanel(['filters', false]);\n      }, 3000);\n    }} togglePanel={panel} exclusions={exclusion} filters={filter} />;\n  }\n}",...Filters.parameters?.docs?.source}}},Ticks.parameters={...Ticks.parameters,docs:{...Ticks.parameters?.docs,source:{originalSource:"{\n  render: args => <h2>Not implemented</h2>\n}",...Ticks.parameters?.docs?.source}}};const __namedExportsOrder=["Empty","PredefinedDataset","NoSplashScreen","OnClientAPIConnected","OnSelectionUpdate","OnLabelUpdate","NoClusteringOnLoad","OneSecondClusteringOnLoad","CustomContainerStyleAndSize","BackgroundColor","LabelStyle","PointStyle","EdgeStyle","NeighborhoodHighlightStyle","HoverPropertiesInsteadOfInspector","LabelsWithoutProperties","LabelsWithoutActions","LabelsOnlyOnHover","PointsOfInterestWithoutTextLabel","ManyPointsOfInterest","HideChrome","HideChromeButShowTools","TogglePanelFilters","TogglePanelExclusions","TogglePanelScene","TogglePanelLabels","TogglePanelLayout","TogglePanelNone","ScalePointSize","BindPointSizeCategorical","BindPointColorContinuous","LayoutSettings","LayoutLockedX","LayoutLockedY","LayoutLockedRadius","RadialAxisAndLayout","VerticalAxisAndLayout","Filters","Ticks"]}}]);